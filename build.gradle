plugins {
    id "org.springframework.boot" version "2.6.2"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "java"
    id "jacoco"
    id "io.freefair.lombok" version "6.3.0"
}

group = "com.teddycrane"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "11"

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-jdbc"
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.security:spring-security-test"
    implementation "com.github.javafaker:javafaker:$java_faker_version"
    implementation("io.jsonwebtoken:jjwt:$jwt_version")
    implementation "mysql:mysql-connector-java"
    implementation "org.springdoc:springdoc-openapi-ui:$springdoc_version"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.testcontainers:testcontainers:$testcontainers_version"
    testImplementation "org.testcontainers:junit-jupiter:$testcontainers_version"
    testImplementation "org.testcontainers:mysql:$testcontainers_version"

    developmentOnly "org.springframework.boot:spring-boot-devtools"
    compileOnly "org.projectlombok:lombok:$lombok_version"
    annotationProcessor "org.projectlombok:lombok:$lombok_version"
    testCompileOnly "org.projectlombok:lombok:$lombok_version"
    testAnnotationProcessor "org.projectlombok:lombok:$lombok_version"
}

bootRun {
    String activeProfile = System.properties['spring.profiles.active']
    jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5015"]
    systemProperty "spring.profiles.active", activeProfile
}

sourceSets {
    integrationTest {
        java {
            srcDir file('src/integrationTest/java')
            compileClasspath += sourceSets.test.compileClasspath
            runtimeClasspath += sourceSets.test.runtimeClasspath
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
    }

    // split tests with filter
    if (project.hasProperty("testFilter")) {
        List<String> props = project.getProperties().get("testFilter").split("\\s+")
        props.each {
            include(it.replace("src/test/java/com/", "**/").replace(".java", ".class"))
        }
    }

    finalizedBy jacocoTestReport // always generate test reports
}

task integrationTest(type: Test) {
    useJUnitPlatform()

    // Show message while test is running
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    testLogging.showStandardStreams = true // show debug output

    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
    }
    environment('spring.profiles.active', 'integration')

    group = 'integration'
    description = 'run integration tests'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

tasks.build.dependsOn(jacocoTestReport)

jacocoTestReport {
    dependsOn test // require test run before report generation
    executionData tasks.withType(Test).findAll { it.state.executed }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/teddycrane/racemanagement/Application.class",
                    "com/teddycrane/racemanagement/config/*.class",
                    "com/teddycrane/racemanagement/security/**/*.class"
            ])
        }))
    }

    reports {
        xml.enabled true
        xml.destination(file("${jacoco.reportsDir}/all-tests/jacocoAllTests.xml"))
        html.enabled true
        html.destination(file("${jacoco.reportsDir}/html"))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            limit {
                minimum = 0.70
            }
        }
    }
}

static void setConfiguration(configuration) {
    if (configuration.canBeResolved) {
        configuration.resolve()
    }
}

task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { project ->
            project.buildscript.configurations.each { configuration ->
                setConfiguration(configuration)
            }
            project.configurations.each { configuration ->
                setConfiguration(configuration)
            }
        }
    }
}
